/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        Base0 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp F1  &kp V  &kp G  &kp M             &kp F  &kp DOUBLE_QUOTES    &kp SQT  &kp K      &kp U             &kp J      &kp Q       &kp F1
&kp F2  &kp R  &kp S  &mt LEFT_SHIFT T  &kp H  &kp P                &kp Y    &kp I      &mt LEFT_SHIFT E  &kp O      &kp A       &kp F2
&kp F3  &kp Z  &kp X  &kp C             &kp D  &kp B                &kp Z    &kp W      &kp SLASH         &kp COMMA  &kp PERIOD  &kp F3
                      &mo 1             &kp N  &kp BACKSPACE        &to 2    &kp SPACE  &kp RALT
            >;
        };

        NavCon1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 3    &kp K_MUTE    &kp N7          &kp PAGE_DOWN  &kp PAGE_UP   &kp ESCAPE  &kp F1
&kp F2  &kp LC(Z)     &kp LC(X)     &bt BT_SEL 2  &bt BT_SEL 3  &out OUT_TOG    &kp C_VOL_UP  &kp LEFT        &kp DOWN       &kp UP_ARROW  &kp RIGHT   &kp F2
&kp F3  &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &out OUT_BLE    &kp C_VOL_DN  &trans          &trans         &trans        &trans      &kp F3
                                    &kp LGUI      &trans        &to 0           &to 2         &kp LEFT_SHIFT  &kp RALT
            >;
        };

        NumSym2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1  &kp EXCL  &kp AT    &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET  &kp N7  &kp N8  &kp N9  &kp RPAR  &kp F1
&kp F2  &kp       &kp       &kp        &kp       &kp          &kp PLUS   &kp N4  &kp N5  &kp N7  &kp N4    &kp F2
&kp F3  &kp       &kp LBKT  &kp RBKT   &kp       &kp          &kp MINUS  &kp N1  &kp N2  &kp N3  &kp PIPE  &kp F3
                            &kp LSHFT  &kp       &to 0        &kp RET    &kp     &kp N0
            >;
        };

        Gaming3 {
            bindings = <
&kp F1  &kp TAB    &kp Q  &kp E  &kp W     &kp R        &kp Y  &kp U   &kp I   &kp O   &kp ESC    &kp F1
&kp F2  &kp LCTRL  &kp A  &kp S  &kp D     &kp F        &kp P  &kp N1  &kp N2  &kp N3  &kp ENTER  &kp F2
&kp F3  &kp LSHFT  &kp Z  &kp X  &kp C     &kp V        &kp N  &kp N4  &kp N5  &kp N6  &kp F10    &kp F3
                          &kp B  &kp LALT  &kp SPACE    &to 0  &mo 1   &kp M
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
